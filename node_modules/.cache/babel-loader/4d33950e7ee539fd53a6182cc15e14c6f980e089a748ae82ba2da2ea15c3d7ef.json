{"ast":null,"code":"var _jsxFileName = \"/Users/owenzimmer/GEMS/src/components/GraphEditor.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { ReactFlow, Background, Controls, applyNodeChanges, applyEdgeChanges, useReactFlow } from '@xyflow/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function GraphEditor({\n  nodes,\n  setNodes,\n  edges,\n  setEdges\n}) {\n  _s();\n  const reactFlowInstance = useReactFlow();\n\n  // store the last copied selection\n  const [copyBuffer, setCopyBuffer] = useState(null);\n  const onNodesChange = changes => setNodes(nds => applyNodeChanges(changes, nds));\n  const onEdgesChange = changes => setEdges(eds => applyEdgeChanges(changes, eds));\n  const onConnect = params => setEdges(eds => [...eds, {\n    ...params,\n    id: `${params.source}-${params.target}`\n  }]);\n  const onNodesDelete = deleted => {\n    const delIds = new Set(deleted.map(n => n.id));\n    setNodes(nds => nds.filter(n => !delIds.has(n.id)));\n    setEdges(eds => eds.filter(e => !delIds.has(e.source) && !delIds.has(e.target)));\n  };\n  const onEdgesDelete = deleted => {\n    const delIds = new Set(deleted.map(e => e.id));\n    setEdges(eds => eds.filter(e => !delIds.has(e.id)));\n  };\n\n  // Copy selected elements into buffer\n  const handleCopy = useCallback(() => {\n    const allNodes = reactFlowInstance.getNodes();\n    const allEdges = reactFlowInstance.getEdges();\n    const selectedNodes = allNodes.filter(n => n.selected);\n    const selectedIds = new Set(selectedNodes.map(n => n.id));\n    const selectedEdges = allEdges.filter(e => e.selected && selectedIds.has(e.source) && selectedIds.has(e.target));\n    setCopyBuffer({\n      nodes: selectedNodes,\n      edges: selectedEdges\n    });\n  }, [reactFlowInstance]);\n\n  // Paste buffer with new IDs and an offset\n  const handlePaste = useCallback(() => {\n    if (!copyBuffer) return;\n    const {\n      nodes: bufNodes,\n      edges: bufEdges\n    } = copyBuffer;\n\n    // generate new IDs and map old -> new\n    const idMap = new Map();\n    bufNodes.forEach(n => {\n      idMap.set(n.id, `${n.id}-${Date.now()}`); // or use uuid\n    });\n\n    // offset so pasted items aren't directly on top\n    const offset = {\n      x: 20,\n      y: 20\n    };\n\n    // create new nodes\n    const newNodes = bufNodes.map(n => ({\n      ...n,\n      id: idMap.get(n.id),\n      position: {\n        x: n.position.x + offset.x,\n        y: n.position.y + offset.y\n      },\n      selected: false\n    }));\n\n    // create new edges with remapped IDs\n    const newEdges = bufEdges.map(e => ({\n      ...e,\n      id: `${idMap.get(e.source)}-${idMap.get(e.target)}`,\n      source: idMap.get(e.source),\n      target: idMap.get(e.target),\n      selected: false\n    }));\n\n    // append to state\n    setNodes(nds => nds.concat(newNodes));\n    setEdges(eds => eds.concat(newEdges));\n    // update clipboard so you can paste again if desired\n    setCopyBuffer({\n      nodes: newNodes,\n      edges: newEdges\n    });\n  }, [copyBuffer]);\n\n  // catch key events for copy/paste\n  const onKeyDown = useCallback(event => {\n    // Ctrl+C\n    if ((event.ctrlKey || event.metaKey) && event.key === 'c') {\n      event.preventDefault();\n      handleCopy();\n    }\n    // Ctrl+V\n    if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n      event.preventDefault();\n      handlePaste();\n    }\n  }, [handleCopy, handlePaste]);\n\n  // Drag/drop handlers omitted for brevity...\n  const onDragOver = e => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n  const onDrop = e => {\n    // your existing dropâ†’add-node logic\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '90vh'\n    },\n    onKeyDown: onKeyDown,\n    tabIndex: 0 // make focusable so it receives key events\n    ,\n    onDrop: onDrop,\n    onDragOver: onDragOver,\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodesDelete: onNodesDelete,\n      onEdgesDelete: onEdgesDelete,\n      fitView: true\n      // enable box selection by default\n      ,\n      selectionOnDrag: true,\n      children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n_s(GraphEditor, \"MHgzdH3/xXpKsJ4WWuhPsYDuk2A=\", false, function () {\n  return [useReactFlow];\n});\n_c = GraphEditor;\nvar _c;\n$RefreshReg$(_c, \"GraphEditor\");","map":{"version":3,"names":["React","useState","useCallback","ReactFlow","Background","Controls","applyNodeChanges","applyEdgeChanges","useReactFlow","jsxDEV","_jsxDEV","GraphEditor","nodes","setNodes","edges","setEdges","_s","reactFlowInstance","copyBuffer","setCopyBuffer","onNodesChange","changes","nds","onEdgesChange","eds","onConnect","params","id","source","target","onNodesDelete","deleted","delIds","Set","map","n","filter","has","e","onEdgesDelete","handleCopy","allNodes","getNodes","allEdges","getEdges","selectedNodes","selected","selectedIds","selectedEdges","handlePaste","bufNodes","bufEdges","idMap","Map","forEach","set","Date","now","offset","x","y","newNodes","get","position","newEdges","concat","onKeyDown","event","ctrlKey","metaKey","key","preventDefault","onDragOver","dataTransfer","dropEffect","onDrop","style","width","height","tabIndex","children","fitView","selectionOnDrag","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/owenzimmer/GEMS/src/components/GraphEditor.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport {\n  ReactFlow,\n  Background,\n  Controls,\n  Node,\n  Edge,\n  OnNodesChange,\n  OnEdgesChange,\n  OnConnect,\n  OnNodesDelete,\n  OnEdgesDelete,\n  applyNodeChanges,\n  applyEdgeChanges,\n  useReactFlow,\n} from '@xyflow/react';\n\ntype NodeData = { label: string };\n\ntype GraphEditorProps = {\n  nodes: Node<NodeData>[];\n  setNodes: React.Dispatch<React.SetStateAction<Node<NodeData>[]>>;\n  edges: Edge[];\n  setEdges: React.Dispatch<React.SetStateAction<Edge[]>>;\n};\n\nexport function GraphEditor({\n  nodes,\n  setNodes,\n  edges,\n  setEdges,\n}: GraphEditorProps) {\n  const reactFlowInstance = useReactFlow();\n\n  // store the last copied selection\n  const [copyBuffer, setCopyBuffer] = useState<{\n    nodes: Node<NodeData>[];\n    edges: Edge[];\n  } | null>(null);\n\n  const onNodesChange: OnNodesChange = (changes) =>\n    setNodes((nds) => applyNodeChanges(changes, nds) as Node<NodeData>[]);\n\n  const onEdgesChange: OnEdgesChange = (changes) =>\n    setEdges((eds) => applyEdgeChanges(changes, eds));\n\n  const onConnect: OnConnect = (params) =>\n    setEdges((eds) => [\n      ...eds,\n      { ...params, id: `${params.source}-${params.target}` },\n    ]);\n\n  const onNodesDelete: OnNodesDelete = (deleted) => {\n    const delIds = new Set(deleted.map((n) => n.id));\n    setNodes((nds) => nds.filter((n) => !delIds.has(n.id)));\n    setEdges((eds) =>\n      eds.filter((e) => !delIds.has(e.source) && !delIds.has(e.target))\n    );\n  };\n\n  const onEdgesDelete: OnEdgesDelete = (deleted) => {\n    const delIds = new Set(deleted.map((e) => e.id));\n    setEdges((eds) => eds.filter((e) => !delIds.has(e.id)));\n  };\n\n  // Copy selected elements into buffer\n  const handleCopy = useCallback(() => {\n    const allNodes = reactFlowInstance.getNodes();\n    const allEdges = reactFlowInstance.getEdges();\n    const selectedNodes = allNodes.filter((n) => n.selected);\n    const selectedIds = new Set(selectedNodes.map((n) => n.id));\n    const selectedEdges = allEdges.filter(\n      (e) => e.selected && selectedIds.has(e.source) && selectedIds.has(e.target)\n    );\n    setCopyBuffer({ nodes: selectedNodes, edges: selectedEdges });\n  }, [reactFlowInstance]);\n\n  // Paste buffer with new IDs and an offset\n  const handlePaste = useCallback(() => {\n    if (!copyBuffer) return;\n    const { nodes: bufNodes, edges: bufEdges } = copyBuffer;\n\n    // generate new IDs and map old -> new\n    const idMap = new Map<string, string>();\n    bufNodes.forEach((n) => {\n      idMap.set(n.id, `${n.id}-${Date.now()}`); // or use uuid\n    });\n\n    // offset so pasted items aren't directly on top\n    const offset = { x: 20, y: 20 };\n\n    // create new nodes\n    const newNodes = bufNodes.map((n) => ({\n      ...n,\n      id: idMap.get(n.id)!,\n      position: {\n        x: n.position.x + offset.x,\n        y: n.position.y + offset.y,\n      },\n      selected: false,\n    }));\n\n    // create new edges with remapped IDs\n    const newEdges = bufEdges.map((e) => ({\n      ...e,\n      id: `${idMap.get(e.source)}-${idMap.get(e.target)}`,\n      source: idMap.get(e.source)!,\n      target: idMap.get(e.target)!,\n      selected: false,\n    }));\n\n    // append to state\n    setNodes((nds) => nds.concat(newNodes));\n    setEdges((eds) => eds.concat(newEdges));\n    // update clipboard so you can paste again if desired\n    setCopyBuffer({ nodes: newNodes, edges: newEdges });\n  }, [copyBuffer]);\n\n  // catch key events for copy/paste\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      // Ctrl+C\n      if ((event.ctrlKey || event.metaKey) && event.key === 'c') {\n        event.preventDefault();\n        handleCopy();\n      }\n      // Ctrl+V\n      if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        event.preventDefault();\n        handlePaste();\n      }\n    },\n    [handleCopy, handlePaste]\n  );\n\n  // Drag/drop handlers omitted for brevity...\n  const onDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n  const onDrop = (e: React.DragEvent) => {\n    // your existing dropâ†’add-node logic\n  };\n\n  return (\n    <div\n      style={{ width: '100%', height: '90vh' }}\n      onKeyDown={onKeyDown}\n      tabIndex={0}        // make focusable so it receives key events\n      onDrop={onDrop}\n      onDragOver={onDragOver}\n    >\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodesDelete={onNodesDelete}\n        onEdgesDelete={onEdgesDelete}\n        fitView\n        // enable box selection by default\n        selectionOnDrag\n      >\n        <Background />\n        <Controls />\n      </ReactFlow>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,SACEC,SAAS,EACTC,UAAU,EACVC,QAAQ,EAQRC,gBAAgB,EAChBC,gBAAgB,EAChBC,YAAY,QACP,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWvB,OAAO,SAASC,WAAWA,CAAC;EAC1BC,KAAK;EACLC,QAAQ;EACRC,KAAK;EACLC;AACgB,CAAC,EAAE;EAAAC,EAAA;EACnB,MAAMC,iBAAiB,GAAGT,YAAY,CAAC,CAAC;;EAExC;EACA,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAGlC,IAAI,CAAC;EAEf,MAAMmB,aAA4B,GAAIC,OAAO,IAC3CR,QAAQ,CAAES,GAAG,IAAKhB,gBAAgB,CAACe,OAAO,EAAEC,GAAG,CAAqB,CAAC;EAEvE,MAAMC,aAA4B,GAAIF,OAAO,IAC3CN,QAAQ,CAAES,GAAG,IAAKjB,gBAAgB,CAACc,OAAO,EAAEG,GAAG,CAAC,CAAC;EAEnD,MAAMC,SAAoB,GAAIC,MAAM,IAClCX,QAAQ,CAAES,GAAG,IAAK,CAChB,GAAGA,GAAG,EACN;IAAE,GAAGE,MAAM;IAAEC,EAAE,EAAE,GAAGD,MAAM,CAACE,MAAM,IAAIF,MAAM,CAACG,MAAM;EAAG,CAAC,CACvD,CAAC;EAEJ,MAAMC,aAA4B,GAAIC,OAAO,IAAK;IAChD,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACR,EAAE,CAAC,CAAC;IAChDd,QAAQ,CAAES,GAAG,IAAKA,GAAG,CAACc,MAAM,CAAED,CAAC,IAAK,CAACH,MAAM,CAACK,GAAG,CAACF,CAAC,CAACR,EAAE,CAAC,CAAC,CAAC;IACvDZ,QAAQ,CAAES,GAAG,IACXA,GAAG,CAACY,MAAM,CAAEE,CAAC,IAAK,CAACN,MAAM,CAACK,GAAG,CAACC,CAAC,CAACV,MAAM,CAAC,IAAI,CAACI,MAAM,CAACK,GAAG,CAACC,CAAC,CAACT,MAAM,CAAC,CAClE,CAAC;EACH,CAAC;EAED,MAAMU,aAA4B,GAAIR,OAAO,IAAK;IAChD,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAEI,CAAC,IAAKA,CAAC,CAACX,EAAE,CAAC,CAAC;IAChDZ,QAAQ,CAAES,GAAG,IAAKA,GAAG,CAACY,MAAM,CAAEE,CAAC,IAAK,CAACN,MAAM,CAACK,GAAG,CAACC,CAAC,CAACX,EAAE,CAAC,CAAC,CAAC;EACzD,CAAC;;EAED;EACA,MAAMa,UAAU,GAAGtC,WAAW,CAAC,MAAM;IACnC,MAAMuC,QAAQ,GAAGxB,iBAAiB,CAACyB,QAAQ,CAAC,CAAC;IAC7C,MAAMC,QAAQ,GAAG1B,iBAAiB,CAAC2B,QAAQ,CAAC,CAAC;IAC7C,MAAMC,aAAa,GAAGJ,QAAQ,CAACL,MAAM,CAAED,CAAC,IAAKA,CAAC,CAACW,QAAQ,CAAC;IACxD,MAAMC,WAAW,GAAG,IAAId,GAAG,CAACY,aAAa,CAACX,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACR,EAAE,CAAC,CAAC;IAC3D,MAAMqB,aAAa,GAAGL,QAAQ,CAACP,MAAM,CAClCE,CAAC,IAAKA,CAAC,CAACQ,QAAQ,IAAIC,WAAW,CAACV,GAAG,CAACC,CAAC,CAACV,MAAM,CAAC,IAAImB,WAAW,CAACV,GAAG,CAACC,CAAC,CAACT,MAAM,CAC5E,CAAC;IACDV,aAAa,CAAC;MAAEP,KAAK,EAAEiC,aAAa;MAAE/B,KAAK,EAAEkC;IAAc,CAAC,CAAC;EAC/D,CAAC,EAAE,CAAC/B,iBAAiB,CAAC,CAAC;;EAEvB;EACA,MAAMgC,WAAW,GAAG/C,WAAW,CAAC,MAAM;IACpC,IAAI,CAACgB,UAAU,EAAE;IACjB,MAAM;MAAEN,KAAK,EAAEsC,QAAQ;MAAEpC,KAAK,EAAEqC;IAAS,CAAC,GAAGjC,UAAU;;IAEvD;IACA,MAAMkC,KAAK,GAAG,IAAIC,GAAG,CAAiB,CAAC;IACvCH,QAAQ,CAACI,OAAO,CAAEnB,CAAC,IAAK;MACtBiB,KAAK,CAACG,GAAG,CAACpB,CAAC,CAACR,EAAE,EAAE,GAAGQ,CAAC,CAACR,EAAE,IAAI6B,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,CAAC,CAAC;;IAEF;IACA,MAAMC,MAAM,GAAG;MAAEC,CAAC,EAAE,EAAE;MAAEC,CAAC,EAAE;IAAG,CAAC;;IAE/B;IACA,MAAMC,QAAQ,GAAGX,QAAQ,CAAChB,GAAG,CAAEC,CAAC,KAAM;MACpC,GAAGA,CAAC;MACJR,EAAE,EAAEyB,KAAK,CAACU,GAAG,CAAC3B,CAAC,CAACR,EAAE,CAAE;MACpBoC,QAAQ,EAAE;QACRJ,CAAC,EAAExB,CAAC,CAAC4B,QAAQ,CAACJ,CAAC,GAAGD,MAAM,CAACC,CAAC;QAC1BC,CAAC,EAAEzB,CAAC,CAAC4B,QAAQ,CAACH,CAAC,GAAGF,MAAM,CAACE;MAC3B,CAAC;MACDd,QAAQ,EAAE;IACZ,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMkB,QAAQ,GAAGb,QAAQ,CAACjB,GAAG,CAAEI,CAAC,KAAM;MACpC,GAAGA,CAAC;MACJX,EAAE,EAAE,GAAGyB,KAAK,CAACU,GAAG,CAACxB,CAAC,CAACV,MAAM,CAAC,IAAIwB,KAAK,CAACU,GAAG,CAACxB,CAAC,CAACT,MAAM,CAAC,EAAE;MACnDD,MAAM,EAAEwB,KAAK,CAACU,GAAG,CAACxB,CAAC,CAACV,MAAM,CAAE;MAC5BC,MAAM,EAAEuB,KAAK,CAACU,GAAG,CAACxB,CAAC,CAACT,MAAM,CAAE;MAC5BiB,QAAQ,EAAE;IACZ,CAAC,CAAC,CAAC;;IAEH;IACAjC,QAAQ,CAAES,GAAG,IAAKA,GAAG,CAAC2C,MAAM,CAACJ,QAAQ,CAAC,CAAC;IACvC9C,QAAQ,CAAES,GAAG,IAAKA,GAAG,CAACyC,MAAM,CAACD,QAAQ,CAAC,CAAC;IACvC;IACA7C,aAAa,CAAC;MAAEP,KAAK,EAAEiD,QAAQ;MAAE/C,KAAK,EAAEkD;IAAS,CAAC,CAAC;EACrD,CAAC,EAAE,CAAC9C,UAAU,CAAC,CAAC;;EAEhB;EACA,MAAMgD,SAAS,GAAGhE,WAAW,CAC1BiE,KAA0B,IAAK;IAC9B;IACA,IAAI,CAACA,KAAK,CAACC,OAAO,IAAID,KAAK,CAACE,OAAO,KAAKF,KAAK,CAACG,GAAG,KAAK,GAAG,EAAE;MACzDH,KAAK,CAACI,cAAc,CAAC,CAAC;MACtB/B,UAAU,CAAC,CAAC;IACd;IACA;IACA,IAAI,CAAC2B,KAAK,CAACC,OAAO,IAAID,KAAK,CAACE,OAAO,KAAKF,KAAK,CAACG,GAAG,KAAK,GAAG,EAAE;MACzDH,KAAK,CAACI,cAAc,CAAC,CAAC;MACtBtB,WAAW,CAAC,CAAC;IACf;EACF,CAAC,EACD,CAACT,UAAU,EAAES,WAAW,CAC1B,CAAC;;EAED;EACA,MAAMuB,UAAU,GAAIlC,CAAkB,IAAK;IACzCA,CAAC,CAACiC,cAAc,CAAC,CAAC;IAClBjC,CAAC,CAACmC,YAAY,CAACC,UAAU,GAAG,MAAM;EACpC,CAAC;EACD,MAAMC,MAAM,GAAIrC,CAAkB,IAAK;IACrC;EAAA,CACD;EAED,oBACE5B,OAAA;IACEkE,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAO,CAAE;IACzCZ,SAAS,EAAEA,SAAU;IACrBa,QAAQ,EAAE,CAAE,CAAQ;IAAA;IACpBJ,MAAM,EAAEA,MAAO;IACfH,UAAU,EAAEA,UAAW;IAAAQ,QAAA,eAEvBtE,OAAA,CAACP,SAAS;MACRS,KAAK,EAAEA,KAAM;MACbE,KAAK,EAAEA,KAAM;MACbM,aAAa,EAAEA,aAAc;MAC7BG,aAAa,EAAEA,aAAc;MAC7BE,SAAS,EAAEA,SAAU;MACrBK,aAAa,EAAEA,aAAc;MAC7BS,aAAa,EAAEA,aAAc;MAC7B0C,OAAO;MACP;MAAA;MACAC,eAAe;MAAAF,QAAA,gBAEftE,OAAA,CAACN,UAAU;QAAA+E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACd5E,OAAA,CAACL,QAAQ;QAAA8E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV;AAACtE,EAAA,CA/IeL,WAAW;EAAA,QAMCH,YAAY;AAAA;AAAA+E,EAAA,GANxB5E,WAAW;AAAA,IAAA4E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}