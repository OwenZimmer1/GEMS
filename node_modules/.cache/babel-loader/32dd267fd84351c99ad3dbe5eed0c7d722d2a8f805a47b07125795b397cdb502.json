{"ast":null,"code":"export function computeDominatingSet(graph) {\n  // Build adjacency list (treat edges as undirected)\n  const adj = new Map();\n  graph.nodes.forEach(node => adj.set(node.id, new Set()));\n  graph.edges.forEach(({\n    source,\n    target\n  }) => {\n    if (adj.has(source)) adj.get(source).add(target);\n    if (adj.has(target)) adj.get(target).add(source);\n  });\n  const dominatingSet = new Set();\n  const dominated = new Set(); // nodes already covered\n\n  // Greedy selection: while some nodes are not dominated\n  while (dominated.size < graph.nodes.length) {\n    let bestNode = null;\n    let bestScore = -1;\n    for (const node of graph.nodes) {\n      const id = node.id;\n      if (dominated.has(id)) continue;\n      // Count itself + uncovered neighbors\n      let score = dominated.has(id) ? 0 : 1;\n      adj.get(id).forEach(nbr => {\n        if (!dominated.has(nbr)) score++;\n      });\n      if (score > bestScore) {\n        bestScore = score;\n        bestNode = id;\n      }\n    }\n    if (!bestNode) break; // safety\n    // Add to dominating set and mark its neighbors dominated\n    dominatingSet.add(bestNode);\n    dominated.add(bestNode);\n    adj.get(bestNode).forEach(nbr => dominated.add(nbr));\n  }\n  return dominatingSet;\n}","map":{"version":3,"names":["computeDominatingSet","graph","adj","Map","nodes","forEach","node","set","id","Set","edges","source","target","has","get","add","dominatingSet","dominated","size","length","bestNode","bestScore","score","nbr"],"sources":["/Users/owenzimmer/graph-dominator/src/algorithms/dominatingSet.ts"],"sourcesContent":["export type Graph = {\n    nodes: { id: string }[];\n    edges: { source: string; target: string }[];\n  };\n  \n  export function computeDominatingSet(graph: Graph): Set<string> {\n    // Build adjacency list (treat edges as undirected)\n    const adj = new Map<string, Set<string>>();\n    graph.nodes.forEach((node) => adj.set(node.id, new Set()));\n    graph.edges.forEach(({ source, target }) => {\n      if (adj.has(source)) adj.get(source)!.add(target);\n      if (adj.has(target)) adj.get(target)!.add(source);\n    });\n  \n    const dominatingSet = new Set<string>();\n    const dominated = new Set<string>(); // nodes already covered\n  \n    // Greedy selection: while some nodes are not dominated\n    while (dominated.size < graph.nodes.length) {\n      let bestNode: string | null = null;\n      let bestScore = -1;\n      for (const node of graph.nodes) {\n        const id = node.id;\n        if (dominated.has(id)) continue;\n        // Count itself + uncovered neighbors\n        let score = dominated.has(id) ? 0 : 1;\n        adj.get(id)!.forEach((nbr) => {\n          if (!dominated.has(nbr)) score++;\n        });\n        if (score > bestScore) {\n          bestScore = score;\n          bestNode = id;\n        }\n      }\n      if (!bestNode) break; // safety\n      // Add to dominating set and mark its neighbors dominated\n      dominatingSet.add(bestNode);\n      dominated.add(bestNode);\n      adj.get(bestNode)!.forEach((nbr) => dominated.add(nbr));\n    }\n  \n    return dominatingSet;\n  }\n  "],"mappings":"AAKE,OAAO,SAASA,oBAAoBA,CAACC,KAAY,EAAe;EAC9D;EACA,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAsB,CAAC;EAC1CF,KAAK,CAACG,KAAK,CAACC,OAAO,CAAEC,IAAI,IAAKJ,GAAG,CAACK,GAAG,CAACD,IAAI,CAACE,EAAE,EAAE,IAAIC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC1DR,KAAK,CAACS,KAAK,CAACL,OAAO,CAAC,CAAC;IAAEM,MAAM;IAAEC;EAAO,CAAC,KAAK;IAC1C,IAAIV,GAAG,CAACW,GAAG,CAACF,MAAM,CAAC,EAAET,GAAG,CAACY,GAAG,CAACH,MAAM,CAAC,CAAEI,GAAG,CAACH,MAAM,CAAC;IACjD,IAAIV,GAAG,CAACW,GAAG,CAACD,MAAM,CAAC,EAAEV,GAAG,CAACY,GAAG,CAACF,MAAM,CAAC,CAAEG,GAAG,CAACJ,MAAM,CAAC;EACnD,CAAC,CAAC;EAEF,MAAMK,aAAa,GAAG,IAAIP,GAAG,CAAS,CAAC;EACvC,MAAMQ,SAAS,GAAG,IAAIR,GAAG,CAAS,CAAC,CAAC,CAAC;;EAErC;EACA,OAAOQ,SAAS,CAACC,IAAI,GAAGjB,KAAK,CAACG,KAAK,CAACe,MAAM,EAAE;IAC1C,IAAIC,QAAuB,GAAG,IAAI;IAClC,IAAIC,SAAS,GAAG,CAAC,CAAC;IAClB,KAAK,MAAMf,IAAI,IAAIL,KAAK,CAACG,KAAK,EAAE;MAC9B,MAAMI,EAAE,GAAGF,IAAI,CAACE,EAAE;MAClB,IAAIS,SAAS,CAACJ,GAAG,CAACL,EAAE,CAAC,EAAE;MACvB;MACA,IAAIc,KAAK,GAAGL,SAAS,CAACJ,GAAG,CAACL,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC;MACrCN,GAAG,CAACY,GAAG,CAACN,EAAE,CAAC,CAAEH,OAAO,CAAEkB,GAAG,IAAK;QAC5B,IAAI,CAACN,SAAS,CAACJ,GAAG,CAACU,GAAG,CAAC,EAAED,KAAK,EAAE;MAClC,CAAC,CAAC;MACF,IAAIA,KAAK,GAAGD,SAAS,EAAE;QACrBA,SAAS,GAAGC,KAAK;QACjBF,QAAQ,GAAGZ,EAAE;MACf;IACF;IACA,IAAI,CAACY,QAAQ,EAAE,MAAM,CAAC;IACtB;IACAJ,aAAa,CAACD,GAAG,CAACK,QAAQ,CAAC;IAC3BH,SAAS,CAACF,GAAG,CAACK,QAAQ,CAAC;IACvBlB,GAAG,CAACY,GAAG,CAACM,QAAQ,CAAC,CAAEf,OAAO,CAAEkB,GAAG,IAAKN,SAAS,CAACF,GAAG,CAACQ,GAAG,CAAC,CAAC;EACzD;EAEA,OAAOP,aAAa;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}