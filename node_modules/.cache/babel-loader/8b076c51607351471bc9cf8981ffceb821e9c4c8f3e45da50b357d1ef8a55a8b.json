{"ast":null,"code":"var _jsxFileName = \"/Users/owenzimmer/GEMS/src/components/GraphEditor.tsx\",\n  _s = $RefreshSig$();\n// src/components/GraphEditor.tsx\nimport React, { useState, useCallback } from 'react';\nimport { ReactFlow, Background, Controls, applyNodeChanges, applyEdgeChanges, useReactFlow } from '@xyflow/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function GraphEditor({\n  nodes,\n  setNodes,\n  edges,\n  setEdges\n}) {\n  _s();\n  const reactFlowInstance = useReactFlow();\n\n  // Buffer for copy/paste\n  const [copyBuffer, setCopyBuffer] = useState(null);\n\n  // Handlers for node/edge updates\n  const onNodesChange = changes => setNodes(nds => applyNodeChanges(changes, nds));\n  const onEdgesChange = changes => setEdges(eds => applyEdgeChanges(changes, eds));\n  const onConnect = params => setEdges(eds => [...eds, {\n    ...params,\n    id: `${params.source}-${params.target}`\n  }]);\n\n  // Delete selected items\n  const onNodesDelete = deleted => {\n    const delIds = new Set(deleted.map(n => n.id));\n    setNodes(nds => nds.filter(n => !delIds.has(n.id)));\n    setEdges(eds => eds.filter(e => !delIds.has(e.source) && !delIds.has(e.target)));\n  };\n  const onEdgesDelete = deleted => {\n    const delIds = new Set(deleted.map(e => e.id));\n    setEdges(eds => eds.filter(e => !delIds.has(e.id)));\n  };\n\n  // Copy selected nodes+edges into buffer\n  const handleCopy = useCallback(() => {\n    const allNodes = reactFlowInstance.getNodes();\n    const allEdges = reactFlowInstance.getEdges();\n\n    // Filter and cast selected nodes\n    const selNodes = allNodes.filter(n => n.selected).map(n => n);\n    const selNodeIds = new Set(selNodes.map(n => n.id));\n\n    // Filter and cast edges between selected nodes\n    const selEdges = allEdges.filter(e => e.selected && selNodeIds.has(e.source) && selNodeIds.has(e.target)).map(e => e);\n    setCopyBuffer({\n      nodes: selNodes,\n      edges: selEdges\n    });\n  }, [reactFlowInstance]);\n\n  // Paste buffer with new IDs and offset\n  const handlePaste = useCallback(() => {\n    if (!copyBuffer) return;\n    const {\n      nodes: bufNodes,\n      edges: bufEdges\n    } = copyBuffer;\n\n    // Map old IDs→new IDs\n    const idMap = new Map();\n    bufNodes.forEach(n => idMap.set(n.id, `${n.id}-${Date.now()}`));\n    const offset = {\n      x: 20,\n      y: 20\n    };\n\n    // Create new nodes\n    const newNodes = bufNodes.map(n => ({\n      ...n,\n      id: idMap.get(n.id),\n      position: {\n        x: n.position.x + offset.x,\n        y: n.position.y + offset.y\n      },\n      selected: false\n    }));\n\n    // Create new edges\n    const newEdges = bufEdges.map(e => ({\n      ...e,\n      id: `${idMap.get(e.source)}-${idMap.get(e.target)}`,\n      source: idMap.get(e.source),\n      target: idMap.get(e.target),\n      selected: false\n    }));\n    setNodes(nds => nds.concat(newNodes));\n    setEdges(eds => eds.concat(newEdges));\n    setCopyBuffer({\n      nodes: newNodes,\n      edges: newEdges\n    });\n  }, [copyBuffer]);\n\n  // Keyboard handlers for copy/paste\n  const onKeyDown = useCallback(event => {\n    if ((event.ctrlKey || event.metaKey) && event.key === 'c') {\n      event.preventDefault();\n      handleCopy();\n    }\n    if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n      event.preventDefault();\n      handlePaste();\n    }\n  }, [handleCopy, handlePaste]);\n\n  // Drag & drop to add new nodes\n  const onDragOver = e => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n  const onDrop = e => {\n    e.preventDefault();\n    const bounds = e.currentTarget.getBoundingClientRect();\n    const type = e.dataTransfer.getData('application/reactflow');\n    if (!type) return;\n    const dropX = e.clientX - bounds.left;\n    const dropY = e.clientY - bounds.top;\n    const {\n      x: panX,\n      y: panY,\n      zoom\n    } = reactFlowInstance.getViewport();\n    const position = {\n      x: dropX / zoom - panX,\n      y: dropY / zoom - panY\n    };\n    const newNode = {\n      id: `${Date.now()}`,\n      type,\n      position,\n      data: {\n        label: `Node ${nodes.length + 1}`\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n  };\n  const onNodeClick = useCallback((_, clickedNode) => {\n    // build adjacency set of neighbor IDs\n    const neighbors = new Set();\n    edges.forEach(e => {\n      if (e.source === clickedNode.id) neighbors.add(e.target);\n      if (e.target === clickedNode.id) neighbors.add(e.source);\n    });\n    setNodes(nds => nds.map(n => {\n      if (n.id === clickedNode.id) {\n        // clicked node → red\n        return {\n          ...n,\n          style: {\n            ...n.style,\n            backgroundColor: 'red'\n          }\n        };\n      } else if (neighbors.has(n.id)) {\n        // neighbor → grey\n        return {\n          ...n,\n          style: {\n            ...n.style,\n            backgroundColor: 'grey'\n          }\n        };\n      } else {\n        // otherwise clear\n        return {\n          ...n,\n          style: {}\n        };\n      }\n    }));\n  }, [edges, setNodes]);\n  // const onEdgeClick = useCallback(\n  //   (_: React.MouseEvent, clickedEdge: Edge) => {\n  //     setEdges((eds) =>\n  //       eds.map((e) =>\n  //         e.id === clickedEdge.id\n  //           ? { ...e, style: { ...e.style, stroke: 'red' } }\n  //           : { ...e, style: {} }\n  //       )\n  //     );\n  //   },\n  //   [setEdges]\n  // );\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '90vh'\n    },\n    tabIndex: 0,\n    onKeyDown: onKeyDown,\n    onDrop: onDrop,\n    onDragOver: onDragOver,\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodesDelete: onNodesDelete,\n      onEdgesDelete: onEdgesDelete,\n      fitView: true,\n      selectionOnDrag: true,\n      children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n}\n_s(GraphEditor, \"j7wXx+Ne/+bH/qIEW/UqkCjIjWg=\", false, function () {\n  return [useReactFlow];\n});\n_c = GraphEditor;\nvar _c;\n$RefreshReg$(_c, \"GraphEditor\");","map":{"version":3,"names":["React","useState","useCallback","ReactFlow","Background","Controls","applyNodeChanges","applyEdgeChanges","useReactFlow","jsxDEV","_jsxDEV","GraphEditor","nodes","setNodes","edges","setEdges","_s","reactFlowInstance","copyBuffer","setCopyBuffer","onNodesChange","changes","nds","onEdgesChange","eds","onConnect","params","id","source","target","onNodesDelete","deleted","delIds","Set","map","n","filter","has","e","onEdgesDelete","handleCopy","allNodes","getNodes","allEdges","getEdges","selNodes","selected","selNodeIds","selEdges","handlePaste","bufNodes","bufEdges","idMap","Map","forEach","set","Date","now","offset","x","y","newNodes","get","position","newEdges","concat","onKeyDown","event","ctrlKey","metaKey","key","preventDefault","onDragOver","dataTransfer","dropEffect","onDrop","bounds","currentTarget","getBoundingClientRect","type","getData","dropX","clientX","left","dropY","clientY","top","panX","panY","zoom","getViewport","newNode","data","label","length","onNodeClick","_","clickedNode","neighbors","add","style","backgroundColor","width","height","tabIndex","children","fitView","selectionOnDrag","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/owenzimmer/GEMS/src/components/GraphEditor.tsx"],"sourcesContent":["// src/components/GraphEditor.tsx\nimport React, { useState, useCallback } from 'react';\nimport {\n  ReactFlow,\n  Background,\n  Controls,\n  Node,\n  Edge,\n  OnNodesChange,\n  OnEdgesChange,\n  OnConnect,\n  OnNodesDelete,\n  OnEdgesDelete,\n  applyNodeChanges,\n  applyEdgeChanges,\n  useReactFlow,\n} from '@xyflow/react';\n\ntype NodeData = { label: string };\n\ntype GraphEditorProps = {\n  nodes: Node<NodeData>[];\n  setNodes: React.Dispatch<React.SetStateAction<Node<NodeData>[]>>;\n  edges: Edge[];\n  setEdges: React.Dispatch<React.SetStateAction<Edge[]>>;\n};\n\nexport function GraphEditor({\n  nodes,\n  setNodes,\n  edges,\n  setEdges,\n}: GraphEditorProps) {\n  const reactFlowInstance = useReactFlow();\n\n  // Buffer for copy/paste\n  const [copyBuffer, setCopyBuffer] = useState<{\n    nodes: Node<NodeData>[];\n    edges: Edge[];\n  } | null>(null);\n\n  // Handlers for node/edge updates\n  const onNodesChange: OnNodesChange = (changes) =>\n    setNodes((nds) => applyNodeChanges(changes, nds) as Node<NodeData>[]);\n\n  const onEdgesChange: OnEdgesChange = (changes) =>\n    setEdges((eds) => applyEdgeChanges(changes, eds));\n\n  const onConnect: OnConnect = (params) =>\n    setEdges((eds) => [\n      ...eds,\n      { ...params, id: `${params.source}-${params.target}` },\n    ]);\n\n  // Delete selected items\n  const onNodesDelete: OnNodesDelete = (deleted) => {\n    const delIds = new Set(deleted.map((n) => n.id));\n    setNodes((nds) => nds.filter((n) => !delIds.has(n.id)));\n    setEdges((eds) =>\n      eds.filter((e) => !delIds.has(e.source) && !delIds.has(e.target))\n    );\n  };\n\n  const onEdgesDelete: OnEdgesDelete = (deleted) => {\n    const delIds = new Set(deleted.map((e) => e.id));\n    setEdges((eds) => eds.filter((e) => !delIds.has(e.id)));\n  };\n\n  // Copy selected nodes+edges into buffer\n  const handleCopy = useCallback(() => {\n    const allNodes = reactFlowInstance.getNodes();\n    const allEdges = reactFlowInstance.getEdges();\n\n    // Filter and cast selected nodes\n    const selNodes = allNodes\n      .filter((n) => n.selected)\n      .map((n) => n as Node<NodeData>);\n\n    const selNodeIds = new Set(selNodes.map((n) => n.id));\n\n    // Filter and cast edges between selected nodes\n    const selEdges = allEdges\n      .filter((e) => e.selected && selNodeIds.has(e.source) && selNodeIds.has(e.target))\n      .map((e) => e as Edge);\n\n    setCopyBuffer({ nodes: selNodes, edges: selEdges });\n  }, [reactFlowInstance]);\n\n  // Paste buffer with new IDs and offset\n  const handlePaste = useCallback(() => {\n    if (!copyBuffer) return;\n    const { nodes: bufNodes, edges: bufEdges } = copyBuffer;\n\n    // Map old IDs→new IDs\n    const idMap = new Map<string, string>();\n    bufNodes.forEach((n) => idMap.set(n.id, `${n.id}-${Date.now()}`));\n\n    const offset = { x: 20, y: 20 };\n\n    // Create new nodes\n    const newNodes = bufNodes.map((n) => ({\n      ...n,\n      id: idMap.get(n.id)!,\n      position: {\n        x: n.position.x + offset.x,\n        y: n.position.y + offset.y,\n      },\n      selected: false,\n    }));\n\n    // Create new edges\n    const newEdges = bufEdges.map((e) => ({\n      ...e,\n      id: `${idMap.get(e.source)}-${idMap.get(e.target)}`,\n      source: idMap.get(e.source)!,\n      target: idMap.get(e.target)!,\n      selected: false,\n    }));\n\n    setNodes((nds) => nds.concat(newNodes));\n    setEdges((eds) => eds.concat(newEdges));\n    setCopyBuffer({ nodes: newNodes, edges: newEdges });\n  }, [copyBuffer]);\n\n  // Keyboard handlers for copy/paste\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if ((event.ctrlKey || event.metaKey) && event.key === 'c') {\n        event.preventDefault();\n        handleCopy();\n      }\n      if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        event.preventDefault();\n        handlePaste();\n      }\n    },\n    [handleCopy, handlePaste]\n  );\n\n  // Drag & drop to add new nodes\n  const onDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  const onDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    const bounds = (e.currentTarget as HTMLDivElement).getBoundingClientRect();\n    const type = e.dataTransfer.getData('application/reactflow');\n    if (!type) return;\n\n    const dropX = e.clientX - bounds.left;\n    const dropY = e.clientY - bounds.top;\n    const { x: panX, y: panY, zoom } = reactFlowInstance.getViewport();\n\n    const position = { x: dropX / zoom - panX, y: dropY / zoom - panY };\n\n    const newNode: Node<NodeData> = {\n      id: `${Date.now()}`,\n      type,\n      position,\n      data: { label: `Node ${nodes.length + 1}` },\n    };\n\n    setNodes((nds) => nds.concat(newNode));\n  };\n\n  const onNodeClick = useCallback(\n    (_: React.MouseEvent, clickedNode: Node<NodeData>) => {\n      // build adjacency set of neighbor IDs\n      const neighbors = new Set<string>();\n      edges.forEach((e) => {\n        if (e.source === clickedNode.id) neighbors.add(e.target);\n        if (e.target === clickedNode.id) neighbors.add(e.source);\n      });\n\n      setNodes((nds) =>\n        nds.map((n) => {\n          if (n.id === clickedNode.id) {\n            // clicked node → red\n            return { ...n, style: { ...n.style, backgroundColor: 'red' } };\n          } else if (neighbors.has(n.id)) {\n            // neighbor → grey\n            return { ...n, style: { ...n.style, backgroundColor: 'grey' } };\n          } else {\n            // otherwise clear\n            return { ...n, style: {} };\n          }\n        })\n      );\n    },\n    [edges, setNodes]\n  );\n  // const onEdgeClick = useCallback(\n  //   (_: React.MouseEvent, clickedEdge: Edge) => {\n  //     setEdges((eds) =>\n  //       eds.map((e) =>\n  //         e.id === clickedEdge.id\n  //           ? { ...e, style: { ...e.style, stroke: 'red' } }\n  //           : { ...e, style: {} }\n  //       )\n  //     );\n  //   },\n  //   [setEdges]\n  // );\n\n  return (\n    <div\n    style={{ width: '100%', height: '90vh' }}\n\n      tabIndex={0}\n      onKeyDown={onKeyDown}\n      onDrop={onDrop}\n      onDragOver={onDragOver}\n    >\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodesDelete={onNodesDelete}\n        onEdgesDelete={onEdgesDelete}\n        fitView\n        selectionOnDrag\n      >\n        <Background />\n        <Controls />\n      </ReactFlow>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}