{"ast":null,"code":"var _jsxFileName = \"/Users/owenzimmer/GEMS/src/components/GraphEditor.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { ReactFlow, Background, Controls, applyNodeChanges, applyEdgeChanges, useReactFlow } from '@xyflow/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function GraphEditor({\n  nodes,\n  setNodes,\n  edges,\n  setEdges\n}) {\n  _s();\n  const reactFlowInstance = useReactFlow();\n  const onNodesChange = changes => setNodes(nds => applyNodeChanges(changes, nds));\n  const onEdgesChange = changes => setEdges(eds => applyEdgeChanges(changes, eds));\n  const onConnect = params => setEdges(eds => [...eds, {\n    ...params,\n    id: `${params.source}-${params.target}`\n  }]);\n\n  // Handle drag over - must preventDefault to allow drop\n  const onDragOver = event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n\n  // Handle drop - create new node at drop position\n  const onDrop = event => {\n    event.preventDefault();\n    const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n    const type = event.dataTransfer.getData('application/reactflow');\n    if (!type) {\n      return;\n    }\n\n    // Calculate position inside ReactFlow viewport coordinates\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top\n    });\n\n    // Create a new node — adjust data shape as needed\n    const newNode = {\n      id: `${+new Date()}`,\n      // unique id based on timestamp\n      type,\n      position,\n      data: {\n        label: `New node`\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '90vh'\n    },\n    onDrop: onDrop,\n    onDragOver: onDragOver,\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(GraphEditor, \"ASOjppUSBhZZpJr8IxV5IpLC74k=\", false, function () {\n  return [useReactFlow];\n});\n_c = GraphEditor;\nvar _c;\n$RefreshReg$(_c, \"GraphEditor\");","map":{"version":3,"names":["React","ReactFlow","Background","Controls","applyNodeChanges","applyEdgeChanges","useReactFlow","jsxDEV","_jsxDEV","GraphEditor","nodes","setNodes","edges","setEdges","_s","reactFlowInstance","onNodesChange","changes","nds","onEdgesChange","eds","onConnect","params","id","source","target","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","reactFlowBounds","currentTarget","getBoundingClientRect","type","getData","position","project","x","clientX","left","y","clientY","top","newNode","Date","data","label","concat","style","width","height","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/owenzimmer/GEMS/src/components/GraphEditor.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  ReactFlow,\n  Background,\n  Controls,\n  Node,\n  Edge,\n  OnNodesChange,\n  OnEdgesChange,\n  OnConnect,\n  applyNodeChanges,\n  applyEdgeChanges,\n  useReactFlow,\n} from '@xyflow/react';\n\ntype GraphEditorProps<NodeDataType extends Record<string, unknown>> = {\n  nodes: Node<NodeDataType>[];\n  setNodes: React.Dispatch<React.SetStateAction<Node<NodeDataType>[]>>;\n  edges: Edge[];\n  setEdges: React.Dispatch<React.SetStateAction<Edge[]>>;\n};\n\nexport function GraphEditor<NodeDataType extends Record<string, unknown>>({\n  nodes,\n  setNodes,\n  edges,\n  setEdges,\n}: GraphEditorProps<NodeDataType>) {\n  const reactFlowInstance = useReactFlow();\n\n  const onNodesChange: OnNodesChange = (changes) =>\n    setNodes((nds) => applyNodeChanges(changes, nds) as Node<NodeDataType>[]);\n\n  const onEdgesChange: OnEdgesChange = (changes) =>\n    setEdges((eds) => applyEdgeChanges(changes, eds));\n\n  const onConnect: OnConnect = (params) =>\n    setEdges((eds) => [\n      ...eds,\n      { ...params, id: `${params.source}-${params.target}` },\n    ]);\n\n  // Handle drag over - must preventDefault to allow drop\n  const onDragOver = (event: React.DragEvent) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n\n  // Handle drop - create new node at drop position\n  const onDrop = (event: React.DragEvent) => {\n    event.preventDefault();\n\n    const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n    const type = event.dataTransfer.getData('application/reactflow');\n\n    if (!type) {\n      return;\n    }\n\n    // Calculate position inside ReactFlow viewport coordinates\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top,\n    });\n\n    // Create a new node — adjust data shape as needed\n    const newNode: Node<NodeDataType> = {\n      id: `${+new Date()}`, // unique id based on timestamp\n      type,\n      position,\n      data: { label: `New node` } as NodeDataType,\n    };\n\n    setNodes((nds) => nds.concat(newNode));\n  };\n\n  return (\n    <div\n      style={{ width: '100%', height: '90vh' }}\n      onDrop={onDrop}\n      onDragOver={onDragOver}\n    >\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        fitView\n      >\n        <Background />\n        <Controls />\n      </ReactFlow>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}